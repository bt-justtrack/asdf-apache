#!/usr/bin/env bash
set -Eeuo pipefail

DEBUG="${DEBUG:-}"

if [ -n "${DEBUG}" ]; then
  set -x
fi

if [ -z "${BASH_SOURCE[0]:-}" ]; then
  # zsh
  readonly THIS_DIR="$( cd "$( dirname "${(%):-%N}" )" && pwd )"
else
  readonly THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
fi

readonly INCLUDE_SRC="${INCLUDE_SRC:-1}"

readonly PRODUCT_NAME="$(basename "$(dirname ${THIS_DIR})")"

command -vp curl 2>&1 >/dev/null || (>&2 echo 'Missing curl' && exit 1)
command -v parallel 2>&1 >/dev/null || (>&2 echo 'Missing gnu parallel' && exit 1)

releases_path() {
  local product_name="${1}"
  local version="${2:-}"
  echo "https://archive.apache.org/dist/${product_name}/${version}"
}

list_versions() {
  local product_name="$1"
  local releases_path="$2"
  local curl_cmd cmd raw_versions trimmed_versions grep_str
  curl_cmd="$(command -vp curl)"
  cmd="${curl_cmd} -fsS"

  grep_str='href=".*'"(${product_name})?"'.+(\/|tgz|tar.gz)">'

  # Fetch all tag names, and get only second column. Then remove all unnecesary characters.
  raw_versions="$(eval $cmd $releases_path)"
  trimmed_versions="$(echo "${raw_versions}" | grep -oE "${grep_str}" | sed -E 's/.+"(apache-)?(.+)">/\2/g' | cut -d/ -f1  )"
  echo "${trimmed_versions}" | sort_top_level_versions
}

# stolen from https://github.com/rbenv/ruby-build/pull/631/files#diff-fdcfb8a18714b33b07529b7d02b54f1dR942
sort_top_level_versions() {
  sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' | \
    LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print $2}'
}

sort_sub_versions() {
            # make columns seperated by | I.E. '1.3.2|b|1.3.2-bin' # shaded-1|0|||shaded-1.0
  sed -E 's/(.+)/\1|\1/;s/(([0-9]+)\.([0-9]*)(\.?([0-9])*))-?(.)?(.*\|(.+))/\2|\3|\5|\6|\8/g;' | sort -t"|" -k 1,1n -k2,2n -k3,3n -k4,4r | cut -d"|" -f5
}

get_sub_versions() {
  local product_name="$1"
  local include_src="$2"
  local version="$3"
  local sub_release_path file_names
  sub_release_path="$(releases_path "${product_name}" "${version}/")"
  file_names="$(list_versions "${product_name}" "${sub_release_path}")"
  if [ "${include_src}" = true ] ; then
    printf "%s" "${file_names}" | \
      grep -E 'tgz|tar\.gz' | \
      sed -E 's/'"${product_name}"'-(.+)(\.tgz|\.tar.gz)/\1/g' | \
      sed 's/\-bin//g'
  else
    printf "%s" "${file_names}" | \
      grep -E '\-bin.*\.tgz|\-bin.*\.tar\.gz' | \
      sed -E 's/'"${product_name}"'-(.+)(\.tgz|\.tar.gz)/\1/g' | \
      sed 's/\-bin//g'
  fi
}

export -f get_sub_versions
export -f releases_path
export -f list_versions
export -f sort_top_level_versions

release_path="$(releases_path "${PRODUCT_NAME}")"
init_versions="$(list_versions "${PRODUCT_NAME}" "${release_path}")"
count="$(wc -l <<<"${init_versions}")"
#parallel -j0 -N 60 --pipe parallel -j0
echo "$(parallel --jobs 60 get_sub_versions "${PRODUCT_NAME}" "${INCLUDE_SRC}" <<< "${init_versions}")" |  sort_sub_versions | tr "\n" " "

if [ -n "${DEBUG}" ]; then
  set +x
fi
